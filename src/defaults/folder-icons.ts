interface FolderIcons {
	[key: string]: string[];
}

/// keep-sorted
export const folderIcons: FolderIcons = {
	admin: ["admin", "admins", "manager", "managers", "moderator", "moderators", "moderation"],
	animation: ["animation", "animations", "anim", "anims", "animated"],
	assets: [],
	audio: ["audio", "audios", "sound", "sounds", "music", "aud", "auds"],
	auth: ["auth", "authentication", "auths", "authenticator", "authenticators", "security"],
	benchmark: ["benchmark", "benchmarks", "bench", "benches", "benchs", "performance", "measure", "measures", "measurement"],
	bin: ["binaries", "binary"],
	builder: ["builder", "builders", "factory", "factories", "constructor", "constructors"],
	camera: ["camera", "cameras", "viewmodel", "viewmodels", "lighting", "viewport", "viewports", "thumbnail", "thumbnails"],
	changesets: [".changesets"],
	client: ["client", "clients", "frontend", "frontends", "pwa", "app", "apps"],
	commands: ["commands", "command", "cli", "clis", "cmd", "cmds"],
	component: ["component", "components", "widget", "widgets", "fragments"],
	config: [
		"config",
		"cfg",
		"cfgs",
		"conf",
		"confs",
		".config",
		"configs",
		"configuration",
		"configurations",
		"setting",
		".setting",
		"settings",
		".settings",
		"META-INF",
		"option",
		"options",
		// config aliases
		"cypress",
		".cypress",
		"debug",
		"debugging",
		".devcontainer",
		".direnv",
		".docker",
		".fastlane",
		".firebase",
		".forgejo",
		".gitlab",
		".gradle",
		".husky",
		".idea",
		".kubernetes",
		".k8s",
		".next",
		".renovate",
		".turbo",
		".vercel",
		".now",
		".vscode",
		".vscode-test",
		".wxt",
	],
	connection: ["connection", "api", "apis", "connections", "integration", "integrations"],
	constant: ["constant", "constants", "const", "enum", "enums"],
	content: ["content", "contents", "storage"],
	context: ["context", "contexts"],
	coverage: ["coverage", "audit", "audits", ".nyc-output", ".nyc_output", "e2e", "it", "integration-test", "integration-tests", "__integration-test__", "__integration-tests__"],
	database: [
		"database",
		"databases",
		"db",
		"sql",
		"data",
		"_data",
		"datastore",
		"datastores",
		"save",
		"saves",
		"playerdata",
		"player-data",
	],
	dist: ["bin", "bins", "dist", "dist-newstyle", "out", "build", "release", ".output"],
	docs: ["docs", "_post", "_posts", "doc", "document", "documents", "documentation", "post", "posts", "article", "articles"],
	effects: ["effects", "vfx", "particles"],
	error: ["error", "errors", "exception", "exceptions", "issue", "issues"],
	event: ["event", "events", "remote", "remotes"],
	fonts: ["fonts", "font", "typeface", "typefaces"],
	function: ["function", "functions", "func", "funcs", "lambda", "lambdas", "logic", "math", "maths", "calc", "calcs", "calculation", "calculations"],
	github: ["github", ".github", ".git", "patches", "githooks", ".githooks"],
	hooks: ["hooks", "hook", "composables", "composable"],
	image: [
		"asset",
		"assets",
		"image",
		"_images",
		"_image",
		"_imgs",
		"_img",
		"images",
		"imgs",
		"img",
		"icons",
		"icon",
		"icos",
		"ico",
		"figures",
		"figure",
		"figs",
		"fig",
		"screenshot",
		"screenshots",
		"screengrab",
		"screengrabs",
		"pic",
		"pics",
		"picture",
		"pictures",
		"photo",
		"photos",
		"photograph",
		"photographs",
	],
	input: ["input", "inputs", "device", "devices", "sensor", "sensors"],
	javascript: ["javascript", "js", "cjs", "esm"],
	json: ["json", "schema", "schemas"],
	layout: ["layout", "layouts", "_layouts", "ui", "uis", "interface", "screen", "screens"],
	lib: ["lib", "libs", "library", "libraries"],
	lune: ["lune", ".lune", "lute", ".lute", "luau", ".pesde"],
	marketing: ["marketing", "product", "products", "passes", "gamepasses", "game-passes"],
	middleware: ["middleware", "middlewares", "core", "system", "systems"],
	model: ["model", "models", "redux", "rodux", "reflex"],
	module: [
		"module",
		"modules",
		"node_modules",
		"submodules",
		".submodules",
		"mock",
		"mocks",
		"__mocks__",
		"fixture",
		"fixtures",
		"__fixtures__",
		"devpackages",
		"serverpackages",
		"vendor",
		"vendors",
		"plugin",
		"plugins",
		"_plugins",
		"lune_packages",
		"luau_packages",
		"mod",
		"mods",
		"modding",
		"extension",
		"extensions",
		"addon",
		"addons",
		"shared",
	],
	node: [],
	nuxt: ["nuxt", ".nuxt"],
	package: ["package", "packages", ".cargo", "pkg", "pkgs", "crate", "crates"],
	page: ["page", "pages", "view", "views", "html", "public_html"],
	provider: ["provider", "providers"],
	roblox: ["roblox", "roblox_packages", "place", "places", "universe", "universes"],
	routes: ["routes", "route", "router", "routers", "routing"],
	script: ["script", "scripts", "scripting"],
	server: ["server", "servers", "backend"],
	service: [
		"service",
		"services",
		"controller",
		"controllers",
		"handler",
		"handlers",
		"actor",
		"actors",
		"workflow",
		"workflows",
	],
	source: ["source", "sources", "src", "srcs", "code", "src-tauri"],
	storybook: ["storybook", ".storybook", "stories", "__stories__"],
	styles: [
		"styles",
		"sass",
		"_sass",
		"scss",
		"_scss",
		"css",
		"stylesheet",
		"stylesheets",
		"style",
		"theme",
		"themes",
		"palette",
		"palettes",
	],
	svg: ["svg", "svgs"],
	temp: ["temp", ".temp", "tmp", ".tmp", "cached", "cache", ".cache"],
	template: ["template", "templates"],
	test: [
		"test",
		"tests",
		"testing",
		"__tests__",
		"__snapshots__",
		"__test__",
		"spec",
		"specs",
		"ci",
		".ci",
		"testroot",
	],
	types: ["types", "@types", "typings", "interfaces", "include", "includes", "typedefs", ".typedefs"],
	typescript: ["typescript", "ts", "tsx"],
	util: ["util", "utils", "utility", "utilities", "helper", "helpers"],
	video: ["video", "videos", "vid", "vids", "movie", "movies"],
	web: [
		"web",
		"i18n",
		"internationalization",
		"lang",
		"langs",
		"language",
		"languages",
		"locale",
		"locales",
		"l10n",
		"localization",
		"translation",
		"translate",
		"translations",
		".tx",
		"_site",
		"public",
		"www",
		"wwwroot",
		"website",
		"site",
		"browser",
		"browsers",
		"static",
	],
	yarn: [".yarn"],
};

export const folderNames: { [key: string]: string } = {};

for (const [key, names] of Object.entries(folderIcons)) {
	const id = `folder_${key}`;

	for (const name of names) {
		folderNames[name] = id;
	}
}
